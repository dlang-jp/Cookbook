[
	{
		"kind": "module",
		"file": "source/array_example.d",
		"members": [],
		"comment": "動的配列と静的配列の操作についてまとめます。\n\n要素の初期化、要素の追加(WIP)、要素の削除、ソート(WIP)、ループ操作(WIP)\nExample:\n初期化の例です$(DDOX_UNITTEST_HEADER __unittest_L11_C1)\n---\n// 簡単な配列は new T[N] という形式で初期化できます\nint[] data = new int[100];\nassert(data.length == 100);\n\n// 型に対しコンストラクタを呼ぶような記法でも初期化できます\ndata = new int[](100);\nassert(data.length == 100);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L11_C1)\nExample:\n二次元以上の多次元配列を一括で確保する例です$(DDOX_UNITTEST_HEADER __unittest_L25_C1)\n---\n// 4要素の配列を要素に持つ2要素の配列を初期化します\n// 型に対してコンストラクタのように初期化でき、引数の順序は外側から（使うときにアクセスする順）指定するイメージになります\nint[][] data = new int[][](2, 4);\n\nassert(data.length == 2);\nassert(data[0].length == 4);\n\nint[][][] data2 = new int[][][](2, 3, 4);\nassert(data2.length == 2);\nassert(data2[1].length == 3);\nassert(data2[1][2].length == 4);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L25_C1)\nExample:\n要素のインデックス、または条件式を指定した値の削除\n\n`std.algorithm` の `remove` を使います\n\n- `remove` : $(LINK https://dlang.org/phobos/std_algorithm_mutation.html#.remove)$(DDOX_UNITTEST_HEADER __unittest_L47_C1)\n---\nimport std.algorithm : remove;\n\nint[] data = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100];\n\n// removeは配列を破壊的に編集して結果を返すため、再度使うときは結果を元の変数に代入しなおします\ndata = data.remove(1); // インデックス指定（20を削除）\ndata = data.remove!(a => a > 50); // 条件式指定（50より大きいものを削除）\n\nassert(data == [10, 30, 40, 50]);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L47_C1)\n",
		"name": "array_example"
	},
	{
		"kind": "module",
		"file": "source/getopt_example.d",
		"members": [],
		"comment": "`std.getopt` の使い方についてまとめます。\n\n実行プログラムの引数を解析することができ、柔軟なプログラム作成を助けます。\nExample:\n基本的な引数解析の例です$(DDOX_UNITTEST_HEADER __unittest_L11_C1)\n---\n// 以下のようにプログラムを実行した場合の例です\n// app --format=json\nstring[] args = [\"app.exe\", \"--format=json\"];\n\nimport std.getopt;\n\n// \nstring format;\n\n// 引数の名前、引数を受け付ける変数、説明、で1セットの指定になります\n// 説明は省略可能です\nauto result = getopt(args, \"format\", \"format引数の説明になります\", &format);\n\n// --helpなどの引数が指定されたかどうかで分岐することができます\nif (result.helpWanted)\n{\n    // 自動的に引数の説明などを表示します\n    std.getopt.defaultGetoptPrinter(\"プログラム説明\", result.options);\n    return;\n}\n\nassert(format == \"json\");\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L11_C1)\nExample:\n適度な折り返しを入れてコードフォーマッターでも可読性を保つ例です。$(DDOX_UNITTEST_HEADER __unittest_L40_C1)\n---\nstring[] args = [\"app.exe\", \"--format=json\"];\n\nimport std.getopt;\n\nstring format;\n\n// 以下の記述によってdfmtの有効無効を切り替えることができます\n// dfmt off\nauto result = getopt(\n    args,\n    \"format\", \"format引数の説明になります\", &format,\n);\n// dfmt on\n\nif (result.helpWanted)\n{\n    std.getopt.defaultGetoptPrinter(\"プログラム説明\", result.options);\n    return;\n}\n\nassert(format == \"json\");\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L40_C1)\n",
		"name": "getopt_example"
	},
	{
		"kind": "module",
		"file": "source/string_example.d",
		"members": [],
		"comment": "文字列操作についてまとめます。\n\nTODO: 置換(replace), 削除(remove), 分割(split)\nExample:\n文字列の連結\n\n事前に長さの分からない文字列を構築する場合、`std.array` の `appender` を使います。\n\n`appender` : https://dlang.org/phobos/std_array.html#appender$(DDOX_UNITTEST_HEADER __unittest_L16_C1)\n---\nassert(\"ABC\" ~ \"DEF\" == \"ABCDEF\");\n\n// 多くの文字を連結するときはappenderを使います\n\nimport std.array : appender;\n\nauto buffer = appender!string;\n\nbuffer.put(\"https://\");\nbuffer.put(\"github.com\");\nbuffer.put(\"/dlang\");\n\nassert(buffer.data == \"https://github.com/dlang\");\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L16_C1)\nExample:\n書式化文字列\n\n`std.format` の `format` を使います。\n\nhttps://dlang.org/phobos/std_format.html#.format$(DDOX_UNITTEST_HEADER __unittest_L40_C1)\n---\nimport std.format : format;\n\nint n = 10;\nfloat f = 1.5;\nstring url = \"https://github.com\";\n\nauto text = format!\"%d, %f, %s\"(n, f, url);\n\nassert(text == \"10, 1.500000, https://github.com\", text);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L40_C1)\nExample:\n完全一致、辞書順での比較$(DDOX_UNITTEST_HEADER __unittest_L56_C1)\n---\nauto text = \"ABC\";\nassert(text == \"ABC\");\nassert(text < \"abc\");\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L56_C1)\nExample:\n大文字小文字を無視して比較\n\n`std.uni` の `icmp` を使います\n\n`icmp` : https://dlang.org/phobos/std_uni.html#icmp$(DDOX_UNITTEST_HEADER __unittest_L70_C1)\n---\nimport std.uni;\n\nauto text = \"ABC\";\nassert(icmp(text, \"abc\") == 0);\nassert(icmp(text, \"ab\") == 1);\nassert(icmp(text, \"abcd\") == -1);\n\n// 使い方、戻り値のイメージ\n// \"ABC\" > \"ab\"\n// \"ABC\" - \"ab\" > 0\nassert(icmp(text, \"abc\") == 0);\nassert(icmp(text, \"ab\") > 0);\nassert(icmp(text, \"abcd\") < 0);\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L70_C1)\nExample:\n「で始まる」「で終わる」の例\n\n`std.algorithm` の `startsWith`, `endsWith` を使います。\n\n`startsWith` : $(LINK https://dlang.org/phobos/std_algorithm_searching.html#.startsWith)$(BR)\n`endsWith` : $(LINK https://dlang.org/phobos/std_algorithm_searching.html#.endsWith)$(DDOX_UNITTEST_HEADER __unittest_L95_C1)\n---\nimport std.algorithm : startsWith, endsWith;\n\nauto text = \"std.algorithm\";\n\n// ～で始まる\nassert(startsWith(text, \"std.\"));\nassert(text.startsWith(\"std.\"));\n\n// ～で終わる\nassert(endsWith(text, \".algorithm\"));\nassert(text.endsWith(\".algorithm\"));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L95_C1)\nExample:\n文字列が出現する位置を検索します。\n\n`std.string` の `indexOf` を使用します。\n\n`indexOf` : https://dlang.org/phobos/std_string.html#.indexOf$(DDOX_UNITTEST_HEADER __unittest_L117_C1)\n---\nimport std.string : indexOf;\n\nauto text = \"std.algorithm.searching\";\n\nassert(indexOf(text, \"search\") == 14);\nassert(text.indexOf(\"search\") == 14);\n\n// 大文字小文字を無視することもできます\n// std.typeconsからYesやNoをimportして使います\nimport std.typecons : Yes, No;\nimport std.string : CaseSensitive;\n\nauto url = \"https://github.com/dlang/dmd\";\nassert(url.indexOf(\"GITHUB\", No.CaseSensitive));\n\n---\n$(DDOX_UNITTEST_FOOTER __unittest_L117_C1)\n",
		"name": "string_example"
	}
]