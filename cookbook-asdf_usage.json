[
 {
  "name" : "asdf_usage.example",
  "kind" : "module",
  "file" : "/home/runner/work/Cookbook/Cookbook/thirdparty/json/source/asdf_usage/example.d",
  "comment" : "Asdfの使用例\n\nJSON形式のデータを取り扱う Asdf の使い方についてまとめます。\n\nAsdf の特徴として、PhobosのJSONではできない、構造体やクラスの直接シリアライズ/デシリアライズや、UDAによる細かな挙動の調整が可能な点があります。\n\nまた、 `Asdf` オブジェクトがPhobosの `JSONValue` とおおむね同じ役割を持っているオブジェクトですが、`Asdf`はJSON以外のフォーマットにも対応できるような設計になっている(ような気がします)。$(BR)\n今は `parseJson` しかありませんが、 `parseYaml` とか `parseSdl` とかができる日が来るかもしれません。\n\n## ドキュメント\nhttp://docs.asdf.dlang.io/index.html\n\n",
  "members" : [
   {
    "name" : "__unittest_L22_C1",
    "kind" : "function",
    "comment" : "JSON文字列の解析例です。\n\n`parseJson` 関数を使って解析し、汎用的な `Asdf` オブジェクトに変換します。\n",
    "line" : 22,
    "char" : 1,
    "endline" : 60,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L60_C1",
    "kind" : "function",
    "comment" : "JSON文字列を独自の構造体にデシリアライズする例です。\n\n1度 Asdf オブジェクトに変換した後か、文字列に `deserialize` 関数を使うことで独自構造体に変換できます。\n",
    "line" : 60,
    "char" : 1,
    "endline" : 81,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L81_C1",
    "kind" : "function",
    "comment" : "オブジェクトのJSON文字列化（シリアライズ）の例です。\n",
    "line" : 81,
    "char" : 1,
    "endline" : 114,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L114_C1",
    "kind" : "function",
    "comment" : "Unix timestampである数値をSysTimeとして扱う場合の変換方法です。\n\nデータ型に合わせたProxyを定義して変換ロジックを書き、 `serializedAs` を対象フィールドに属性として付与します。\n\nSee_Also: http://docs.asdf.dlang.io/asdf_serialization.html\n",
    "line" : 114,
    "char" : 1,
    "endline" : 160,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L160_C1",
    "kind" : "function",
    "comment" : "特定のキーが複数の形式を取り得る場合の解析例です。\n\nデータ型を `SumType` で定義することで安全に取り扱います。\n解析ではAsdfの `kind` を用いて分岐します。\n\nsumtype : $(LINK http://code.dlang.org/packages/sumtype)\n",
    "line" : 160,
    "char" : 1,
    "endline" : 216,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L216_C1",
    "kind" : "function",
    "comment" : "特定のキーが複数のオブジェクト形式を取り得る場合の解析例です。\n\nデータ型を `SumType` で定義することで安全に取り扱います。\n解析ではオブジェクトがtypeキーを持つと想定し、キーを確認して形式を切り替えます。\n\nsumtype : $(LINK http://code.dlang.org/packages/sumtype)\n",
    "line" : 216,
    "char" : 1,
    "endline" : 282,
    "endchar" : 1
   }
  ]
 }
]
